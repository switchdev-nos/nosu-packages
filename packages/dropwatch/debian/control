Source: dropwatch
Section: net
Priority: optional
Standards-Version: 4.4.1
Maintainer: Dmitry Smirnov <onlyjob@debian.org>
Build-Depends: debhelper (>= 12~)
    ,automake
    ,binutils-dev
    ,libnl-genl-3-dev
    ,libreadline-dev
    ,pkgconf | pkg-config
Rules-Requires-Root: no
Homepage: https://github.com/nhorman/dropwatch
Vcs-Git: https://salsa.debian.org/debian/dropwatch.git
Vcs-Browser: https://salsa.debian.org/debian/dropwatch

Package: dropwatch
Architecture: any
Depends: ${misc:Depends}, ${shlibs:Depends}
Description: tool for detecting and diagnosing dropped network packets
 Dropwatch is a utility to help developers and system administrators to
 diagnose problems in the Linux Networking stack, specifically their
 ability to diagnose where packets are getting dropped. Dropwatch aims to
 improve on the following shortcomings:
 .
  1) Consolidation, or lack thereof. Currently, to check the status of
  dropped packets in the kernel, one needs to check at least 3 places, and
  possibly more: The /proc/net/snmp file, the netstat utility, the tc
  utility, and ethtool. Dropwatch aims to consolidate several of those
  checks into one tool, making it easier for a sysadmin or developer to
  detect lost packets
 .
  2) Clarity of information.  Dropped packets are not obvious. A sysadmin
  needs to be intimately familiar with each of the above tools to
  understand which events or statistics correlate to a dropped packet and
  which do not. While that is often self evident, it is also often not.
  Dropwatch aims to improve that clarity.
 .
  3) Ambiguity. Even when a dropped packet is detected, the causes for
  those dropped packets are not always clear. Does a UDPInError mean the
  application receive buffer was full, or does it mean its checksum was
  bad? Dropwatch attempts to disambiguate the causes for dropped packets.
 .
  4) Performance. Utilities can be written to aggregate the data in the
  various other utilities to solve some of these problems, but such
  solutions require periodic polling of several interfaces, which is far
  from optimal, especially when lost packets are rare. This solution
  improves on the performance aspect by implementing a kernel feature which
  allows asynchronous notification of dropped packets when they happen.
